import java.io.FileInputStream
import opennlp.tools.namefind.{NameFinderME, TokenNameFinderModel}
import opennlp.tools.tokenize.{Tokenizer, TokenizerME, TokenizerModel}
import opennlp.tools.util.Span
import opennlp.tools.parser.ParserFactory
import opennlp.tools.parser.ParserModel
import opennlp.tools.parser.Parse
import opennlp.tools.cmdline.parser.ParserTool
import scala.collection.JavaConverters._

object Main25 {
	def getNounPhrases(parse: Parse): List[String] = {
		// Принимает обьект parser и рекурсивно извлеакает из него все именные словосочетания, сначала он фильтрует дочерние 							   // элементы и выбирает только те, у которых тип равен "NP".
		val nounPhrases = parse.getChildren.filter(_.getType == "NP").map(_.getCoveredText).toList
		val childNounPhrases = parse.getChildren.flatMap(getNounPhrases).toList
		nounPhrases ++ childNounPhrases
	}
	// Результаом операции является коллекция строк представляющая фразы существительные. Сначала фильтруем дочерние элементы и добавляем покрываемый текст, то етсь текст охваченный синтаксическим анализом в список. 
	
	def main(args:Array[String]): Unit = {
		// В этом методе мы перебираем результаты синтаксического анализа и выводим. 
		val parserModel = new ParserModel(new FileInputStream("en-parser-chunking.bin"))
		val parser = ParserFactory.create(parserModel)
		val sentence = "The quick brown fox jumps over the lazy dog."
		val topParses = ParserTool.parseLine(sentence, parser, 1)
		for (parse <- topParses) {
			val nounPhrases = getNounPhrases(parse)
			println(nounPhrases.mkString(","))
		}
	}
}
// The quick brown fox jumps over the lazy dog.,  The quick brown fox jumps, the lazy dog.