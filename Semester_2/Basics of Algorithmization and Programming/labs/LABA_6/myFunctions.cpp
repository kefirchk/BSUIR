#include "Header.h" //подключение библиотеки

int input_int()     //функция ввода целого числа
{
	int k, n, f = 0; char symbol; //промежуточные переменные для проверки и ввода
	do
	{
		if (f++) printf("%c[%d;%dmОшибка!%c[%dm\n", 27, 1, 31, 27, 0);
		rewind(stdin);                    //чистка буфера
		k = scanf_s("%d%c", &n, &symbol); //ввод значения
		if (k > 1 && n > 0 && symbol == '\n') break;
	} while (1);
	return n;        //вернуть введенное целое число
}

char* input_str()  //функция ввода строки
{
	int j = 0;    //счетчик
	static char sl[len] = {};         //массив для записи слова
	char c;       //промежуточная переменная для замены и простоты
	do
	{
		rewind(stdin);    //чистка буфера
		c = _getche();    //ввод символа
		sl[j] = c;        //если вводим имя файла
		if (c == '\b')                            //нажата клавиша Backspace
		{
			if (j > 0) { printf(" \b \b"); j--; } //аналог клавиши Backspace
			else printf(" ");
			j--;
		}
		else if (c == '\r') break;  //если нажат Enter
	} while (j++ < len - 1);
	sl[j] = '\0';
	return sl;                      //вернуть строку
}

int offer()  //функция выбора, которая решает продолжить ли выполнение программы  
{
	for (;;)
	{
		puts("\nХотите продолжить?(y\\n)");
		rewind(stdin);               //чистка буфера
		char s = _getch();           //ввод y или n(выбор для продолжения или нет)
		if (s == 'y') return 1;      //выход из цикла
		else if (s == 'n') return 0;
		else printf("%c[%d;%dmОшибка!%c[%dm\n", 27, 1, 31, 27, 0);//текст об ошибке
	}
}

int* input_basic_info()              //функции ввода основных данных о общежитии
{
	static int info[3], i;           //массив данных и счетчик
	if (!i)
	{
		info[0] = 12;                //кол-во этажей
		info[1] = 20;                //кол-во комнат на этаже
		info[2] = 4;                 //кол-во жильцов в одной комнате
		printf("%c[%d;%dmНАЧАЛЬНЫЕ ДАННЫЕ:%c[%dm\n", 27, 1, 30, 27, 0); 
		printf("%c[%d;%dmКоличество этажей: %d%c[%dm\n", 27, 1, 30, info[0], 27, 0); 
		printf("%c[%d;%dmКоличество комнат на каждом этаже: %d%c[%dm\n", 27, 1, 30, info[1], 27, 0); 
		printf("%c[%d;%dmМаксимальное количество жильцов в одной комнате: %d%c[%dm\n", 27, 1, 30, info[2], 27, 0); 
		printf("%c[%d;%dm____________________________________________________%c[%dm\n", 27, 1, 30, 27, 0);
		i++;
	}
	else
	{
		printf("\nВведите количество этажей: ");
	    info[0] = input_int();        //вызов функции ввода кол-ва этажей
	    printf("Введите количество комнат на каждом этаже: ");
	    info[1] = input_int();        //вызов функции ввода кол-ва комнат
	    printf("Введите максимальное количество жильцов в одной комнате: ");
	    info[2] = input_int();        //вызов функции ввода кол-ва жильцов
	}
	return info;                      //вернуть массив данных
}

void input_person_info(people* &person)      //функция ввода данных о человеке
{
	person = memory3();                      //вызов функции выделения памяти под человека
	printf("Введите имя человека: ");
	strcpy_s(person->name, input_str());     //вызов функции ввода имени
	printf("\nВведите фамилию человека: ");
	strcpy_s(person->surname, input_str());  //вызов функции ввода фамилии
	printf("\nВведите факультет, на котором обучается студент: ");
	strcpy_s(person->faculty, input_str());  //вызов функции ввода факультета
	printf("\nВведите группу студента: ");   
	person->group = input_int();             //вызов функции ввода номера группы
}

floor* memory1()                             //функция выделения памяти под этаж
{
	floor* newFloor = NULL;
	if (!(newFloor = (floor*)calloc(1, sizeof(floor))))
	{
		printf("%c[%d;%dmНет свободной памяти!%c[%dm\n", 27, 1, 31, 27, 0);
		exit(1);
	}
	return newFloor;
}
rooms* memory2()                             //функция выделения памяти под комнату
{
	rooms* newRoom = NULL;
	if (!(newRoom = (rooms*)calloc(1, sizeof(rooms))))
	{
		printf("%c[%d;%dmНет свободной памяти!%c[%dm\n", 27, 1, 31, 27, 0);
		exit(1);
	}
	return newRoom;
}
people* memory3()                             //функция выделения памяти под человека
{
	people* newHuman = NULL;
	if (!(newHuman = (people*)calloc(1, sizeof(people))))
	{
		printf("%c[%d;%dmНет свободной памяти!%c[%dm\n", 27, 1, 31, 27, 0);
		exit(1);
	}
	return newHuman;
}

void copy_info(people* &newHuman, people* &person) //функция копирования введенной информации о человеке
{
	strcpy_s(newHuman->name, person->name);        //копирование имени
	strcpy_s(newHuman->surname, person->surname);  //копирование фамилии
	strcpy_s(newHuman->faculty, person->faculty);  //копирование факультета
	newHuman->group = person->group;               //копирование номера группы
}

void instructions()                                //функция вывода инструкций работы программы
{
	puts("\nГЛАВНОЕ МЕНЮ"
		"\n1 - заселить человека, стоящего на очереди"
		"\n2 - заселить другого человека"
		"\n3 - выселить человека из общежития"
		"\n4 - проверить общежитие на наличие свободных мест"
		"\n5 - переселить человека из комнаты в комнату"
		"\n6 - поставить человека в очередь на заселение"
		"\n7 - вывести информацию о заселенных студентах с этажа"
		"\n8 - заменить начальные данные"
		"\n9 - вывести список выселенных людей"
		"\nd - очистка всех динамических структур данных"
		"\n0 - выход");
}