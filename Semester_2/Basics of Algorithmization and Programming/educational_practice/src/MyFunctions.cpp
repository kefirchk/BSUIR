#include "Header.h"               //подключение библиотеки

int input_int()                   //функция ввода целого числа
{
	int k, n, f = 0; char symbol; //промежуточные переменные для проверки и ввода
	do
	{
		if (f++) printf("%c[%d;%dmОшибка ввода!%c[%dm\n", 27, 1, 31, 27, 0);
		rewind(stdin);                              //чистка буфера
		k = scanf_s("%d%c", &n, &symbol);           //ввод значения
		if (k > 1 && n>0 && symbol == '\n') break;  //если соблюдены все условия, то прервать цикл
	} while (1);
	return n;                     //вернуть вводимое число
}

char* input_str()                 //функция ввода строки
{
	int j = 0;                    //счетчик по строке
	static char sl[len+1] = {};   //массив для записи слова
	char c;                       //промежуточная переменная
	do
	{
		rewind(stdin);            //чистка буфера
		c = _getche();            //ввод символа
		sl[j] = c;                //если вводим имя файла
		if (c == '\b')            //нажата клавиша Backspace
		{
			if (j > 0) { printf(" \b \b"); j--; } //аналог клавиши Backspace
			else printf(" ");
			j--;
		}
		else if (c == '\r') break;//если нажат Enter
	} while (j++ < len - 1);
	sl[j] = '\0';
	return sl;                    //вернуть строку
}

int offer()  //функция выбора, которая решает продолжить ли выполнение программы  
{
	char s;                       //объявление промежуточной переменной
	for (;;)
	{
		rewind(stdin);            //чистка буфера
		s = _getch();             //ввод y или n(выбор для продолжения или нет)
		if (s == 'y') return 1;   //выбрано продолжение программы           
		if (s == 'n') return 0;   //выбрано завершение программы
		else printf("%c[%d;%dm\nОшибка!\nХотите продолжить?(y\\n)%c[%dm\n", 27, 1, 31, 27, 0); //текст об ошибке
	}
}

info* input_PIN(info* tail)       //функция входа в учетную запись
{
	info* pointer = tail;         //указатель для прохода по очереди
	int attempt = 3;              //попытки входа
	char name[len+1], surname[len+1]; //имя, фамилия человека
	while (1)
	{
		printf("%c[%d;%dmВведите имя:%c[%dm\n", 27, 1, 33, 27, 0);
		strcpy_s(name, input_str());    //вызов функции ввода имени
		printf("%c[%d;%dm\nВведите фамилию:%c[%dm\n", 27, 1, 33, 27, 0);
		strcpy_s(surname, input_str()); //вызов функции ввода фамилии
		while (pointer)                 //цикл по очереди, пока не нашелся требуемый элемент
		{
			if (!strcmp(pointer->name, name) && !strcmp(pointer->surname, surname)) break; //требуемый элемент нашелся
			pointer = pointer->next;    //переход к следующему элементу
		}
		if (pointer) break;             
		else printf("%c[%d;%dm\nТакой человек не зарегистрирован!%c[%dm\n", 27, 1, 31, 27, 0);
		pointer = tail;                 //переходим к началу очереди
		return 0;
	}
	while (attempt)                     //цикл по вводу пин-кода, пока есть попытки
	{
		printf("%c[%d;%dm\nВведите PIN-код:%c[%dm\n", 27, 1, 33, 27, 0);
		int pin = input_int();          //вызов функции ввода пин-кода
		if (pointer->PIN == pin)        //если введен правильный пин-код
		{
			//printf("%c[%d;%dm\nДобро пожаловать, %s %s!%c[%dm\n", 27, 1, 32, pointer->name, pointer->surname, 27, 0);
			return pointer;
		}
		else
		{
			--attempt;                  //уменьшение количетства попыток ввода
			printf("%c[%d;%dm\nНеверный PIN-код!\nПопробуйте ещё раз\nОсталось %d попыток%c[%dm\n", 27, 1, 31, attempt, 27, 0);
		}
		if (!attempt)                   //если попыток не осталось
			return 0;
	}
	return 0;
}

int currency_choice()                   //функция выбора валюты
{
	while (1)                           //бесконечный цикл, пока не выбрана валюта
	{
		printf("\n%c[%d;%dmВыберите валюту:%c[%dm", 27, 1, 34, 27, 0);
		puts("\n1 - Американский доллар"
			"\n2 - Евро"
			"\n3 - Российский рубль"
			"\n4 - Белорусский рубль");
		char c = 0;
		scanf_s("\n%c", &c);
		switch(c)
		//switch (char c = _getch())
		{
		case '1': return 0;             //выбран доллар
		case '2': return 1;             //выбран евро
		case '3': return 2;             //выбран российский рубль
		case '4': return 3;             //выбран белорусский рубль
		default: printf("%c[%d;%dm\nОшибка выбора валюты! Пожалуйста, повторите снова%c[%dm\n", 27, 1, 31, 27, 0);
			continue;                   //продолжить цикл
		} break;                        //прервать цикл
	}
}

int sum_choice()                        //функция выбора суммы
{
	while (1)                           //бесконечный цикл, пока не выбрана сумма
	{
		printf("\n%c[%d;%dmВыберите сумму:%c[%dm", 27, 1, 34, 27, 0);
		puts("\n1 - 5"
			"\n2 - 10"
			"\n3 - 20"
			"\n4 - 50"
			"\n5 - другая сумма");
		char c = 0;
		scanf_s("\n%c", &c);
		switch (c)
		//switch (char c = _getch())
		{
		case '1': return 5;             //выбрана сумма в 5 номиналов
		case '2': return 10;            //выбрана сумма в 10 номиналов
		case '3': return 20;            //выбрана сумма в 20 номиналов
		case '4': return 50;            //выбрана сумма в 50 номиналов
		case '5': puts("Введите сумму:");
			return input_int();   //вызов функции ввода другой суммы
		default: printf("%c[%d;%dm\nОшибка выбора суммы! Пожалуйста, повторите снова%c[%dm\n", 27, 1, 31, 27, 0);
			continue;                   //продолжить цикл
		} break;                        //прервать цикл
	}
}

void replace_file(info*&tail, char* fileName, FILE* &f)     //функция замены файла
{
	info *p = NULL;                                         //указатель для прохода по очереди
	char fileCopyName[] = "tempfile";                       //временное имя нового файла
	struct_in_file(fileCopyName, f, tail);                  //вызов функции занесения очереди в файл
	while (tail) { p = tail; tail = tail->next; free(p); }  //удаление очереди
	if (remove(fileName)) { printf("%c[%d;%dmОшибка удаления старого файла!%c[%dm\n", 27, 1, 31, 27, 0); exit(1); }
	if (rename(fileCopyName, fileName))                     //переименование нового файла
	{
		printf("%c[%d;%dmОшибка переименования файла!%c[%dm\n", 27, 1, 31, 27, 0); exit(1);
	}
	printf("%c[%d;%dmОперация успешно проведена!%c[%dm\n", 27, 1, 32, 27, 0);
	return;
}

void instructions()                //функция вывода иструкций по работе программы
{
	printf("\n%c[%d;%dmВыберите услугу:%c[%dm", 27, 1, 34, 27, 0);
	puts("\n1 - добавить человека в базу данных"
		"\n2 - удалить человека из базы данных"
		"\n3 - просмотр остатка денежных средств на счете пользователя"
		"\n4 - просмотр данных всех зарегистрированных пользователей"
		"\n5 - получение денежных средств"
		"\n6 - пополнение счета денежными средствами"
		"\n7 - перевод денежных средств со счета на счет"
		"\n8 - смена ПИН-кода дебетовой карточки"
		"\n9 - выбрать другой файл для работы"
		"\n0 - выход");
}

void clean(info** tail)         //функция очистки очереди
{
	info* pointer;              //временный указатель на структуру типа info
	while (*tail)               //очистка очереди
	{ 
		pointer = *tail;        //указатель на хвост
		*tail = (*tail)->next;  //переместить хвост
		free(pointer);          //очистить память от элемента
	} 
}