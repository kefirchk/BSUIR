#include "Headers.h"                                                  //подключение библиотеки
enum data { Int, Pointer2x } tp;
void revers(int k, int l, data tp, ...);

void sort_by_row(char** str, int n, char &number)                     //функция сортировки слов по строкам в тексте в поряке убывания
{
	int begin1 = 0, end1 = 0, lenght1 = 0, begin2 = 0, end2 = 0, lenght2 = 0, flag = 0; //объявление переменных,
	//где lenght1, lenght1 - длины слов, begin1, begin2 - начальные символы слов, end1, end2 - конечные символы слов
	for (int i = 0; i < n; i++)                                       //цикл по i для прохода по строкам текста
	{
		for (int j = 0; str[i][j] != '\0';)                           //цикл по j для прохода по символам строки
		{
			while ((*(*(str+i)+j)) == ' ' || ((*(*(str + i) + j)) >= '0' && (*(*(str + i) + j)) <= '9')) j++; //поиск начала первого слова 
			begin1 = j;                                               //начало очередного первого слова
			while ((*(*(str + i) + j)) != ' ' && (*(*(str + i) + j)) != '\0' && (((*(*(str + i) + j)) > 64 && (*(*(str + i) + j)) < 91) || ((*(*(str + i) + j)) > 96 && (*(*(str + i) + j)) < 123))) j++;  //поиск конца первого слова  
			end1 = j;                                                 //конец очередного первого слова
			int jj = j;
			lenght1 = end1 - begin1;                                  //длина первого слова
			for (; (*(*(str + i) + jj)) != '\0';)                     //цикл для поиска остальных слов, сравнение их с первым и их перестановка при выполнении некоторых условий
			{
				while ((*(*(str + i) + jj)) == ' ')jj++;              //поиск начала второго слова
				begin2 = jj;                                          //начало очередного второго слова
				while ((*(*(str + i) + jj)) != ' ' && (*(*(str + i) + jj)) != '\0') jj++; //поиск конца второго слова
				end2 = jj;                                            //конец очередного второго слова
				lenght2 = end2 - begin2;                              //длина второго слова
				if ((number == '1' && lenght2 < lenght1) || (number == '2' && lenght2 > lenght1))                                    //сортировка по возрастанию
				{
					revers(2, 1, Pointer2x, str, 3, Int, begin1, end2, i);
					//revers(str, begin1, end2, i);                     //реверс от начало первого слова до конца второго
					int k1 = begin1 + lenght2;
					//revers(str, begin1, k1, i);                       //реверс второго (уже первого) слова
					revers(2, 1, Pointer2x, str, 3, Int, begin1, k1, i);
					int k2 = end2 - lenght1;
					revers(2, 1, Pointer2x, str, 3, Int, k2, end2, i);
					//revers(str, k2, end2, i);                         //реверс первого (уже второго) слова
					int k3 = begin1 + lenght2;
				    //revers(str, k3, k2, i);                           //реверс остальной части строки между этими словами
					revers(2, 1, Pointer2x, str, 3, Int, k3, k2, i);
					begin1 = end2 - lenght1;                          //новое начало первого слова
					end1 = end2;                                      //новый конец второго слова
					flag++;
				}
			}
			if (flag > 0) j = 0;                                      //если были какие-то перестановки с первым словом, то снова сравниваем очередное первое слово с другими
			else while ((*(*(str + i) + j)) != ' ' && (*(*(str + i) + j)) != '\0') j++;   //если перестановок не было, то переходим к другому слову
			flag = 0;
		}
	}
}



void revers(int k, int l, data tp, ...)    // k-число групп
{
	char** str = NULL;
	int begin=0 , end=0, i=0;
	va_list p;            // p - безтиповой указатель
	va_start(p, tp);      // указатель на параметр стека следующий за tp 
	while (k--)           // пока количество параметров в стeке не равно 0
	{
		switch (tp)       // определяем тип параметров (переменных)
		{
		case Int: while (l--) {       // пока не считаны все переменные группы
			if (l == 2) begin = va_arg(p, int);          // считываем из стека int параметр
			if (l == 1) end = va_arg(p, int);          // считываем из стека int параметр
			if (l == 0) i = va_arg(p, int);          // считываем из стека int параметр
		}
			break;
		                 // и передвигаем указатель p на следующий параметр
		case Pointer2x: while (l--)  // пока не считаны все переменные группы
			str = va_arg(p, char**); //считываем из стека char** параметр
			break;
		}
		l = va_arg(p, int);          // считывается число элементов в группе (int)
		tp = va_arg(p, enum data);   // считывается признак типа элементов группы
	}
	va_end(p);
	char c=0;                                              //промежуточная переменная
	while (begin < end)                                    //цикл выполняется, пока начало рассматриваемой части строки меньше его конца
	{
		c = *(*(str + i) + begin);                         //запоминаем начальный символ рассматриваемой части строки
		*(*(str + i) + begin) = *(*(str + i) + end - 1);   //присваивание первого символа на место последнего рассматриваемой части строки
		*(*(str + i) + end - 1) = c;                       //присваивание последнего символа на место первого рассматриваемой части строки
		begin++; end--;                                    //переход к следующим для перестановки символов
	}
}