#include "Headers.h"                                               //подключение библиотеки

char* sort_all_text(char* &new_str, char &number)                  //функция сортировки слов независимо от их рассположения в тексте в порядке возрастания
{
	int begin1 = 0, end1 = 0, lenght1 = 0, begin2 = 0, end2 = 0, lenght2 = 0, flag = 0;//объявление переменных, 
	//где lenght1, lenght1 - длины слов, begin1, begin2 - начальные символы слов, end1, end2 - конечные символы слов
	for (int j = 0; new_str[j] != '\0';)                           //цикл по j для прохода по символам строки                                                  
	{
		while ((*(new_str+j)) == ' ' || ((*(new_str + j)) >= '0' && (*(new_str + j)) <= '9')) j++; //поиск начало слова                            
		begin1 = j;                                                //начало очередного первого слова
		while ((*(new_str + j)) != ' ' && (*(new_str + j)) != '\0' && (((*(new_str + j)) > 64 && (*(new_str + j)) < 91) || ((*(new_str + j)) > 96 && (*(new_str + j)) < 123))) j++; //поиск конца слова
		end1 = j;                                                  //конец очередного первого слова
		int jj = j;
		lenght1 = end1 - begin1;                                   //длина первого слова
		for (; (*(new_str + jj)) != '\0';)                         //цикл для поиска остальных слов, сравнение их с первым и их перестановка при выполнении некоторых условий
		{
			while ((*(new_str + jj)) == ' ') jj++;                 //пропуск возможных пробелов
			begin2 = jj;                                           //начало очередного второго слова
			while ((*(new_str + jj)) != ' ' && (*(new_str + jj)) != '\0') jj++; //проход по слову
			end2 = jj;                                             //конец очередного второго слова
			lenght2 = end2 - begin2;                               //длина второго слова
			if ((number == '1' && lenght2 < lenght1) || (number == '2' && lenght2 > lenght1))     //сортировка по возрастанию или убыванию
			{
				revers_new(new_str, begin1, end2);                 //реверс от начало первого слова до конца второго
				int k1 = begin1 + lenght2;
				revers_new(new_str, begin1, k1);                   //реверс второго (уже первого) слова
				int k2 = end2 - lenght1;
				revers_new(new_str, k2, end2);                     //реверс первого (уже второго) слова
				int k3 = begin1 + lenght2;
				revers_new(new_str, k3, k2);                       //реверс остальной части строки между этими словами
				begin1 = end2 - lenght1;                           //новое начало первого слова
				end1 = end2;                                       //новый конец первого слова
				flag++;
			}
		}
		if (flag > 0) j = 0;                                       //если были какие-то перестановки с первым словом, то снова сравниваем очередное первое слово с другими
		else while ((*(new_str + j)) != ' ' && (*(new_str + j)) != '\0') j++;  //если перестановок не было, то переходим к другому слову
		flag = 0;
	}
	return new_str;                                                //возвращение значения new_str
}